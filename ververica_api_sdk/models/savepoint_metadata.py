# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SavepointMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'namespace': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'deployment_id': 'str',
        'job_id': 'str',
        'origin': 'str',
        'annotations': 'dict(str, str)',
        'resource_version': 'int'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'created_at': 'createdAt',
        'modified_at': 'modifiedAt',
        'deployment_id': 'deploymentId',
        'job_id': 'jobId',
        'origin': 'origin',
        'annotations': 'annotations',
        'resource_version': 'resourceVersion'
    }

    def __init__(self, id=None, namespace=None, created_at=None, modified_at=None, deployment_id=None, job_id=None, origin=None, annotations=None, resource_version=None):  # noqa: E501
        """SavepointMetadata - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._namespace = None
        self._created_at = None
        self._modified_at = None
        self._deployment_id = None
        self._job_id = None
        self._origin = None
        self._annotations = None
        self._resource_version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if namespace is not None:
            self.namespace = namespace
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if job_id is not None:
            self.job_id = job_id
        if origin is not None:
            self.origin = origin
        if annotations is not None:
            self.annotations = annotations
        if resource_version is not None:
            self.resource_version = resource_version

    @property
    def id(self):
        """Gets the id of this SavepointMetadata.  # noqa: E501


        :return: The id of this SavepointMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavepointMetadata.


        :param id: The id of this SavepointMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this SavepointMetadata.  # noqa: E501


        :return: The namespace of this SavepointMetadata.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SavepointMetadata.


        :param namespace: The namespace of this SavepointMetadata.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def created_at(self):
        """Gets the created_at of this SavepointMetadata.  # noqa: E501


        :return: The created_at of this SavepointMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SavepointMetadata.


        :param created_at: The created_at of this SavepointMetadata.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this SavepointMetadata.  # noqa: E501


        :return: The modified_at of this SavepointMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this SavepointMetadata.


        :param modified_at: The modified_at of this SavepointMetadata.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def deployment_id(self):
        """Gets the deployment_id of this SavepointMetadata.  # noqa: E501


        :return: The deployment_id of this SavepointMetadata.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this SavepointMetadata.


        :param deployment_id: The deployment_id of this SavepointMetadata.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def job_id(self):
        """Gets the job_id of this SavepointMetadata.  # noqa: E501


        :return: The job_id of this SavepointMetadata.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this SavepointMetadata.


        :param job_id: The job_id of this SavepointMetadata.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def origin(self):
        """Gets the origin of this SavepointMetadata.  # noqa: E501


        :return: The origin of this SavepointMetadata.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SavepointMetadata.


        :param origin: The origin of this SavepointMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER_REQUEST", "SUSPEND_AND_UPGRADE", "SUSPEND", "COPIED"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"  # noqa: E501
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def annotations(self):
        """Gets the annotations of this SavepointMetadata.  # noqa: E501


        :return: The annotations of this SavepointMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this SavepointMetadata.


        :param annotations: The annotations of this SavepointMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def resource_version(self):
        """Gets the resource_version of this SavepointMetadata.  # noqa: E501


        :return: The resource_version of this SavepointMetadata.  # noqa: E501
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this SavepointMetadata.


        :param resource_version: The resource_version of this SavepointMetadata.  # noqa: E501
        :type: int
        """

        self._resource_version = resource_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavepointMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavepointMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
