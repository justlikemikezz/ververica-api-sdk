# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecretValueMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'resource_version': 'int',
        'labels': 'dict(str, str)',
        'annotations': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'created_at': 'createdAt',
        'modified_at': 'modifiedAt',
        'resource_version': 'resourceVersion',
        'labels': 'labels',
        'annotations': 'annotations'
    }

    def __init__(self, id=None, name=None, namespace=None, created_at=None, modified_at=None, resource_version=None, labels=None, annotations=None):  # noqa: E501
        """SecretValueMetadata - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._namespace = None
        self._created_at = None
        self._modified_at = None
        self._resource_version = None
        self._labels = None
        self._annotations = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if resource_version is not None:
            self.resource_version = resource_version
        if labels is not None:
            self.labels = labels
        if annotations is not None:
            self.annotations = annotations

    @property
    def id(self):
        """Gets the id of this SecretValueMetadata.  # noqa: E501


        :return: The id of this SecretValueMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecretValueMetadata.


        :param id: The id of this SecretValueMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SecretValueMetadata.  # noqa: E501


        :return: The name of this SecretValueMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecretValueMetadata.


        :param name: The name of this SecretValueMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this SecretValueMetadata.  # noqa: E501


        :return: The namespace of this SecretValueMetadata.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SecretValueMetadata.


        :param namespace: The namespace of this SecretValueMetadata.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def created_at(self):
        """Gets the created_at of this SecretValueMetadata.  # noqa: E501


        :return: The created_at of this SecretValueMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SecretValueMetadata.


        :param created_at: The created_at of this SecretValueMetadata.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this SecretValueMetadata.  # noqa: E501


        :return: The modified_at of this SecretValueMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this SecretValueMetadata.


        :param modified_at: The modified_at of this SecretValueMetadata.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def resource_version(self):
        """Gets the resource_version of this SecretValueMetadata.  # noqa: E501


        :return: The resource_version of this SecretValueMetadata.  # noqa: E501
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this SecretValueMetadata.


        :param resource_version: The resource_version of this SecretValueMetadata.  # noqa: E501
        :type: int
        """

        self._resource_version = resource_version

    @property
    def labels(self):
        """Gets the labels of this SecretValueMetadata.  # noqa: E501


        :return: The labels of this SecretValueMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SecretValueMetadata.


        :param labels: The labels of this SecretValueMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def annotations(self):
        """Gets the annotations of this SecretValueMetadata.  # noqa: E501


        :return: The annotations of this SecretValueMetadata.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this SecretValueMetadata.


        :param annotations: The annotations of this SecretValueMetadata.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretValueMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretValueMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
