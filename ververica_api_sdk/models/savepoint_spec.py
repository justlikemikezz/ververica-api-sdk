# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SavepointSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'savepoint_location': 'str',
        'flink_savepoint_id': 'FlinkSavepointId'
    }

    attribute_map = {
        'savepoint_location': 'savepointLocation',
        'flink_savepoint_id': 'flinkSavepointId'
    }

    def __init__(self, savepoint_location=None, flink_savepoint_id=None):  # noqa: E501
        """SavepointSpec - a model defined in Swagger"""  # noqa: E501

        self._savepoint_location = None
        self._flink_savepoint_id = None
        self.discriminator = None

        if savepoint_location is not None:
            self.savepoint_location = savepoint_location
        if flink_savepoint_id is not None:
            self.flink_savepoint_id = flink_savepoint_id

    @property
    def savepoint_location(self):
        """Gets the savepoint_location of this SavepointSpec.  # noqa: E501


        :return: The savepoint_location of this SavepointSpec.  # noqa: E501
        :rtype: str
        """
        return self._savepoint_location

    @savepoint_location.setter
    def savepoint_location(self, savepoint_location):
        """Sets the savepoint_location of this SavepointSpec.


        :param savepoint_location: The savepoint_location of this SavepointSpec.  # noqa: E501
        :type: str
        """

        self._savepoint_location = savepoint_location

    @property
    def flink_savepoint_id(self):
        """Gets the flink_savepoint_id of this SavepointSpec.  # noqa: E501


        :return: The flink_savepoint_id of this SavepointSpec.  # noqa: E501
        :rtype: FlinkSavepointId
        """
        return self._flink_savepoint_id

    @flink_savepoint_id.setter
    def flink_savepoint_id(self, flink_savepoint_id):
        """Sets the flink_savepoint_id of this SavepointSpec.


        :param flink_savepoint_id: The flink_savepoint_id of this SavepointSpec.  # noqa: E501
        :type: FlinkSavepointId
        """

        self._flink_savepoint_id = flink_savepoint_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavepointSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavepointSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
