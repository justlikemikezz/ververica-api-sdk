# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Pods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affinity': 'JsonNode',
        'annotations': 'dict(str, str)',
        'env_vars': 'list[EnvVar]',
        'image_pull_secrets': 'list[LocalObjectReference]',
        'node_selector': 'dict(str, str)',
        'security_context': 'JsonNode',
        'tolerations': 'list[JsonNode]',
        'volume_mounts': 'list[VolumeAndMount]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'annotations': 'annotations',
        'env_vars': 'envVars',
        'image_pull_secrets': 'imagePullSecrets',
        'node_selector': 'nodeSelector',
        'security_context': 'securityContext',
        'tolerations': 'tolerations',
        'volume_mounts': 'volumeMounts'
    }

    def __init__(self, affinity=None, annotations=None, env_vars=None, image_pull_secrets=None, node_selector=None, security_context=None, tolerations=None, volume_mounts=None):  # noqa: E501
        """Pods - a model defined in Swagger"""  # noqa: E501

        self._affinity = None
        self._annotations = None
        self._env_vars = None
        self._image_pull_secrets = None
        self._node_selector = None
        self._security_context = None
        self._tolerations = None
        self._volume_mounts = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if annotations is not None:
            self.annotations = annotations
        if env_vars is not None:
            self.env_vars = env_vars
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if node_selector is not None:
            self.node_selector = node_selector
        if security_context is not None:
            self.security_context = security_context
        if tolerations is not None:
            self.tolerations = tolerations
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts

    @property
    def affinity(self):
        """Gets the affinity of this Pods.  # noqa: E501


        :return: The affinity of this Pods.  # noqa: E501
        :rtype: JsonNode
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this Pods.


        :param affinity: The affinity of this Pods.  # noqa: E501
        :type: JsonNode
        """

        self._affinity = affinity

    @property
    def annotations(self):
        """Gets the annotations of this Pods.  # noqa: E501


        :return: The annotations of this Pods.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Pods.


        :param annotations: The annotations of this Pods.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def env_vars(self):
        """Gets the env_vars of this Pods.  # noqa: E501


        :return: The env_vars of this Pods.  # noqa: E501
        :rtype: list[EnvVar]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this Pods.


        :param env_vars: The env_vars of this Pods.  # noqa: E501
        :type: list[EnvVar]
        """

        self._env_vars = env_vars

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this Pods.  # noqa: E501


        :return: The image_pull_secrets of this Pods.  # noqa: E501
        :rtype: list[LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this Pods.


        :param image_pull_secrets: The image_pull_secrets of this Pods.  # noqa: E501
        :type: list[LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def node_selector(self):
        """Gets the node_selector of this Pods.  # noqa: E501


        :return: The node_selector of this Pods.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this Pods.


        :param node_selector: The node_selector of this Pods.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def security_context(self):
        """Gets the security_context of this Pods.  # noqa: E501


        :return: The security_context of this Pods.  # noqa: E501
        :rtype: JsonNode
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this Pods.


        :param security_context: The security_context of this Pods.  # noqa: E501
        :type: JsonNode
        """

        self._security_context = security_context

    @property
    def tolerations(self):
        """Gets the tolerations of this Pods.  # noqa: E501


        :return: The tolerations of this Pods.  # noqa: E501
        :rtype: list[JsonNode]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this Pods.


        :param tolerations: The tolerations of this Pods.  # noqa: E501
        :type: list[JsonNode]
        """

        self._tolerations = tolerations

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this Pods.  # noqa: E501


        :return: The volume_mounts of this Pods.  # noqa: E501
        :rtype: list[VolumeAndMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this Pods.


        :param volume_mounts: The volume_mounts of this Pods.  # noqa: E501
        :type: list[VolumeAndMount]
        """

        self._volume_mounts = volume_mounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
