# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeploymentSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'upgrade_strategy': 'DeploymentUpgradeStrategy',
        'restore_strategy': 'DeploymentRestoreStrategy',
        'deployment_target_id': 'str',
        'max_savepoint_creation_attempts': 'int',
        'max_job_creation_attempts': 'int',
        'template': 'DeploymentTemplate'
    }

    attribute_map = {
        'state': 'state',
        'upgrade_strategy': 'upgradeStrategy',
        'restore_strategy': 'restoreStrategy',
        'deployment_target_id': 'deploymentTargetId',
        'max_savepoint_creation_attempts': 'maxSavepointCreationAttempts',
        'max_job_creation_attempts': 'maxJobCreationAttempts',
        'template': 'template'
    }

    def __init__(self, state=None, upgrade_strategy=None, restore_strategy=None, deployment_target_id=None, max_savepoint_creation_attempts=None, max_job_creation_attempts=None, template=None):  # noqa: E501
        """DeploymentSpec - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._upgrade_strategy = None
        self._restore_strategy = None
        self._deployment_target_id = None
        self._max_savepoint_creation_attempts = None
        self._max_job_creation_attempts = None
        self._template = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if upgrade_strategy is not None:
            self.upgrade_strategy = upgrade_strategy
        if restore_strategy is not None:
            self.restore_strategy = restore_strategy
        if deployment_target_id is not None:
            self.deployment_target_id = deployment_target_id
        if max_savepoint_creation_attempts is not None:
            self.max_savepoint_creation_attempts = max_savepoint_creation_attempts
        if max_job_creation_attempts is not None:
            self.max_job_creation_attempts = max_job_creation_attempts
        if template is not None:
            self.template = template

    @property
    def state(self):
        """Gets the state of this DeploymentSpec.  # noqa: E501


        :return: The state of this DeploymentSpec.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeploymentSpec.


        :param state: The state of this DeploymentSpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUNNING", "SUSPENDED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def upgrade_strategy(self):
        """Gets the upgrade_strategy of this DeploymentSpec.  # noqa: E501


        :return: The upgrade_strategy of this DeploymentSpec.  # noqa: E501
        :rtype: DeploymentUpgradeStrategy
        """
        return self._upgrade_strategy

    @upgrade_strategy.setter
    def upgrade_strategy(self, upgrade_strategy):
        """Sets the upgrade_strategy of this DeploymentSpec.


        :param upgrade_strategy: The upgrade_strategy of this DeploymentSpec.  # noqa: E501
        :type: DeploymentUpgradeStrategy
        """

        self._upgrade_strategy = upgrade_strategy

    @property
    def restore_strategy(self):
        """Gets the restore_strategy of this DeploymentSpec.  # noqa: E501


        :return: The restore_strategy of this DeploymentSpec.  # noqa: E501
        :rtype: DeploymentRestoreStrategy
        """
        return self._restore_strategy

    @restore_strategy.setter
    def restore_strategy(self, restore_strategy):
        """Sets the restore_strategy of this DeploymentSpec.


        :param restore_strategy: The restore_strategy of this DeploymentSpec.  # noqa: E501
        :type: DeploymentRestoreStrategy
        """

        self._restore_strategy = restore_strategy

    @property
    def deployment_target_id(self):
        """Gets the deployment_target_id of this DeploymentSpec.  # noqa: E501


        :return: The deployment_target_id of this DeploymentSpec.  # noqa: E501
        :rtype: str
        """
        return self._deployment_target_id

    @deployment_target_id.setter
    def deployment_target_id(self, deployment_target_id):
        """Sets the deployment_target_id of this DeploymentSpec.


        :param deployment_target_id: The deployment_target_id of this DeploymentSpec.  # noqa: E501
        :type: str
        """

        self._deployment_target_id = deployment_target_id

    @property
    def max_savepoint_creation_attempts(self):
        """Gets the max_savepoint_creation_attempts of this DeploymentSpec.  # noqa: E501


        :return: The max_savepoint_creation_attempts of this DeploymentSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_savepoint_creation_attempts

    @max_savepoint_creation_attempts.setter
    def max_savepoint_creation_attempts(self, max_savepoint_creation_attempts):
        """Sets the max_savepoint_creation_attempts of this DeploymentSpec.


        :param max_savepoint_creation_attempts: The max_savepoint_creation_attempts of this DeploymentSpec.  # noqa: E501
        :type: int
        """

        self._max_savepoint_creation_attempts = max_savepoint_creation_attempts

    @property
    def max_job_creation_attempts(self):
        """Gets the max_job_creation_attempts of this DeploymentSpec.  # noqa: E501


        :return: The max_job_creation_attempts of this DeploymentSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_job_creation_attempts

    @max_job_creation_attempts.setter
    def max_job_creation_attempts(self, max_job_creation_attempts):
        """Sets the max_job_creation_attempts of this DeploymentSpec.


        :param max_job_creation_attempts: The max_job_creation_attempts of this DeploymentSpec.  # noqa: E501
        :type: int
        """

        self._max_job_creation_attempts = max_job_creation_attempts

    @property
    def template(self):
        """Gets the template of this DeploymentSpec.  # noqa: E501


        :return: The template of this DeploymentSpec.  # noqa: E501
        :rtype: DeploymentTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DeploymentSpec.


        :param template: The template of this DeploymentSpec.  # noqa: E501
        :type: DeploymentTemplate
        """

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
