# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RevisionInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_time': 'str',
        'build_version': 'str',
        'commit_sha_long': 'str',
        'commit_sha_short': 'str'
    }

    attribute_map = {
        'build_time': 'buildTime',
        'build_version': 'buildVersion',
        'commit_sha_long': 'commitShaLong',
        'commit_sha_short': 'commitShaShort'
    }

    def __init__(self, build_time=None, build_version=None, commit_sha_long=None, commit_sha_short=None):  # noqa: E501
        """RevisionInformation - a model defined in Swagger"""  # noqa: E501

        self._build_time = None
        self._build_version = None
        self._commit_sha_long = None
        self._commit_sha_short = None
        self.discriminator = None

        if build_time is not None:
            self.build_time = build_time
        if build_version is not None:
            self.build_version = build_version
        if commit_sha_long is not None:
            self.commit_sha_long = commit_sha_long
        if commit_sha_short is not None:
            self.commit_sha_short = commit_sha_short

    @property
    def build_time(self):
        """Gets the build_time of this RevisionInformation.  # noqa: E501


        :return: The build_time of this RevisionInformation.  # noqa: E501
        :rtype: str
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time):
        """Sets the build_time of this RevisionInformation.


        :param build_time: The build_time of this RevisionInformation.  # noqa: E501
        :type: str
        """

        self._build_time = build_time

    @property
    def build_version(self):
        """Gets the build_version of this RevisionInformation.  # noqa: E501


        :return: The build_version of this RevisionInformation.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this RevisionInformation.


        :param build_version: The build_version of this RevisionInformation.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def commit_sha_long(self):
        """Gets the commit_sha_long of this RevisionInformation.  # noqa: E501


        :return: The commit_sha_long of this RevisionInformation.  # noqa: E501
        :rtype: str
        """
        return self._commit_sha_long

    @commit_sha_long.setter
    def commit_sha_long(self, commit_sha_long):
        """Sets the commit_sha_long of this RevisionInformation.


        :param commit_sha_long: The commit_sha_long of this RevisionInformation.  # noqa: E501
        :type: str
        """

        self._commit_sha_long = commit_sha_long

    @property
    def commit_sha_short(self):
        """Gets the commit_sha_short of this RevisionInformation.  # noqa: E501


        :return: The commit_sha_short of this RevisionInformation.  # noqa: E501
        :rtype: str
        """
        return self._commit_sha_short

    @commit_sha_short.setter
    def commit_sha_short(self, commit_sha_short):
        """Sets the commit_sha_short of this RevisionInformation.


        :param commit_sha_short: The commit_sha_short of this RevisionInformation.  # noqa: E501
        :type: str
        """

        self._commit_sha_short = commit_sha_short

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RevisionInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevisionInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
