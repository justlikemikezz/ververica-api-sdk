# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemInformationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jvm_version': 'str',
        'license': 'License',
        'resource_quota': 'ResourceQuota',
        'revision_information': 'RevisionInformation'
    }

    attribute_map = {
        'jvm_version': 'jvmVersion',
        'license': 'license',
        'resource_quota': 'resourceQuota',
        'revision_information': 'revisionInformation'
    }

    def __init__(self, jvm_version=None, license=None, resource_quota=None, revision_information=None):  # noqa: E501
        """SystemInformationStatus - a model defined in Swagger"""  # noqa: E501

        self._jvm_version = None
        self._license = None
        self._resource_quota = None
        self._revision_information = None
        self.discriminator = None

        if jvm_version is not None:
            self.jvm_version = jvm_version
        if license is not None:
            self.license = license
        if resource_quota is not None:
            self.resource_quota = resource_quota
        if revision_information is not None:
            self.revision_information = revision_information

    @property
    def jvm_version(self):
        """Gets the jvm_version of this SystemInformationStatus.  # noqa: E501


        :return: The jvm_version of this SystemInformationStatus.  # noqa: E501
        :rtype: str
        """
        return self._jvm_version

    @jvm_version.setter
    def jvm_version(self, jvm_version):
        """Sets the jvm_version of this SystemInformationStatus.


        :param jvm_version: The jvm_version of this SystemInformationStatus.  # noqa: E501
        :type: str
        """

        self._jvm_version = jvm_version

    @property
    def license(self):
        """Gets the license of this SystemInformationStatus.  # noqa: E501


        :return: The license of this SystemInformationStatus.  # noqa: E501
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SystemInformationStatus.


        :param license: The license of this SystemInformationStatus.  # noqa: E501
        :type: License
        """

        self._license = license

    @property
    def resource_quota(self):
        """Gets the resource_quota of this SystemInformationStatus.  # noqa: E501


        :return: The resource_quota of this SystemInformationStatus.  # noqa: E501
        :rtype: ResourceQuota
        """
        return self._resource_quota

    @resource_quota.setter
    def resource_quota(self, resource_quota):
        """Sets the resource_quota of this SystemInformationStatus.


        :param resource_quota: The resource_quota of this SystemInformationStatus.  # noqa: E501
        :type: ResourceQuota
        """

        self._resource_quota = resource_quota

    @property
    def revision_information(self):
        """Gets the revision_information of this SystemInformationStatus.  # noqa: E501


        :return: The revision_information of this SystemInformationStatus.  # noqa: E501
        :rtype: RevisionInformation
        """
        return self._revision_information

    @revision_information.setter
    def revision_information(self, revision_information):
        """Sets the revision_information of this SystemInformationStatus.


        :param revision_information: The revision_information of this SystemInformationStatus.  # noqa: E501
        :type: RevisionInformation
        """

        self._revision_information = revision_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInformationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInformationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
