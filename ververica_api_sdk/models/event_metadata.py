# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'deployment_id': 'str',
        'id': 'str',
        'job_id': 'str',
        'name': 'str',
        'namespace': 'str',
        'resource_version': 'int'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'deployment_id': 'deploymentId',
        'id': 'id',
        'job_id': 'jobId',
        'name': 'name',
        'namespace': 'namespace',
        'resource_version': 'resourceVersion'
    }

    def __init__(self, created_at=None, deployment_id=None, id=None, job_id=None, name=None, namespace=None, resource_version=None):  # noqa: E501
        """EventMetadata - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._deployment_id = None
        self._id = None
        self._job_id = None
        self._name = None
        self._namespace = None
        self._resource_version = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if id is not None:
            self.id = id
        if job_id is not None:
            self.job_id = job_id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if resource_version is not None:
            self.resource_version = resource_version

    @property
    def created_at(self):
        """Gets the created_at of this EventMetadata.  # noqa: E501


        :return: The created_at of this EventMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventMetadata.


        :param created_at: The created_at of this EventMetadata.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deployment_id(self):
        """Gets the deployment_id of this EventMetadata.  # noqa: E501


        :return: The deployment_id of this EventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this EventMetadata.


        :param deployment_id: The deployment_id of this EventMetadata.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def id(self):
        """Gets the id of this EventMetadata.  # noqa: E501


        :return: The id of this EventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventMetadata.


        :param id: The id of this EventMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def job_id(self):
        """Gets the job_id of this EventMetadata.  # noqa: E501


        :return: The job_id of this EventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this EventMetadata.


        :param job_id: The job_id of this EventMetadata.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def name(self):
        """Gets the name of this EventMetadata.  # noqa: E501


        :return: The name of this EventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventMetadata.


        :param name: The name of this EventMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["STATE_TRANSITION_IS_NEEDED", "FOUND_A_JOB_TO_TERMINATE", "FOUND_A_JOB_TO_WAIT_FOR_ITS_TERMINATION", "AWAITING_SAVEPOINT_COMPLETION_TO_TRANSITION_TO_SUSPENDED", "CREATING_A_SAVEPOINT_BEFORE_SUSPENSION", "FOUND_A_COMPLETED_SAVEPOINT_READY_FOR_SUSPENSION", "USING_AN_UPGRADE_STRATEGY", "CREATING_A_NEW_JOB", "FAILED_CREATING_A_NEW_JOB", "AWAITING_A_JOB_TO_START", "FOUND_A_STOPPED_JOB_AND_WILL_TERMINATE_IT", "STATE_TRANSITION_IS_COMPLETED", "TRANSITIONED_TO_FINISHED_STATE", "AWAITING_A_JOB_TO_TERMINATE", "TOO_MANY_FAILED_SUSPENSION_ATTEMPTS", "TOO_MANY_FAILED_JOB_CREATION_ATTEMPTS", "SPINNING_UP_A_CLUSTER_FOR_A_JOB", "JOB_SUCCESSFULLY_STARTED", "JOB_SUCCESSFULLY_FINISHED", "AWAITING_FOR_A_CLUSTER_TO_SPIN_UP", "TERMINATING_A_JOB_DUE_TO_AN_UNRECOVERABLE_FAILURE", "AWAIT_FOR_A_CLUSTER_TO_TEARDOWN", "RESOURCE_QUOTA_EXCEEDED", "TRANSITIONING_TO_FAILED_STATE_BECAUSE_OF_A_MISSING_JOB", "TRANSITIONING_TO_FAILED_STATE_BECAUSE_JOB_NOT_STARTED", "TRANSITIONING_TO_FAILED_STATE_BECAUSE_SAVEPOINT_FAILED_IN_FLINK", "TRANSITIONED_TO_COMPLETED", "AWAITING_FOR_A_SAVEPOINT_TO_COMPLETE", "AN_UN_RECOVERABLE_FAILURE_WHILE_TRIGGERING_A_SAVEPOINT", "RECOVERABLE_FAILURE_WHILE_TRIGGERING_A_SAVEPOINT", "SUCCESSFULLY_TRIGGERED_A_SAVEPOINT", "NEED_TO_TRIGGER_A_SAVEPOINT", "AN_UNRECOVERABLE_FAILURE_WHILE_TAKING_A_SAVEPOINT", "RECOVERABLE_FAILURE_WHILE_CHECKING_A_SAVEPOINT_STATUS", "FOUND_AN_OLD_JOB_AND_WILL_TERMINATE_IT", "COULD_NOT_FIND_A_JOB_TO_SUSPEND", "JOB_IS_NOT_CONFIGURED_WITH_SAVEPOINT_SUPPORT", "REFERENCED_DEPLOYMENT_TARGET_DOES_NOT_EXIST", "GENERAL_FAILURE", "FAILED_TO_CREATE_CLUSTER_FOR_JOB"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this EventMetadata.  # noqa: E501


        :return: The namespace of this EventMetadata.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EventMetadata.


        :param namespace: The namespace of this EventMetadata.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def resource_version(self):
        """Gets the resource_version of this EventMetadata.  # noqa: E501


        :return: The resource_version of this EventMetadata.  # noqa: E501
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this EventMetadata.


        :param resource_version: The resource_version of this EventMetadata.  # noqa: E501
        :type: int
        """

        self._resource_version = resource_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
