# coding: utf-8

"""
    Application Manager API

    Application Manager APIs to control Apache Flink jobs  # noqa: E501

    OpenAPI spec version: 2.0.1
    Contact: platform@ververica.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeploymentTemplateSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifact': 'Artifact',
        'parallelism': 'int',
        'number_of_task_managers': 'int',
        'resources': 'dict(str, ResourceSpec)',
        'flink_configuration': 'dict(str, str)',
        'logging': 'Logging',
        'kubernetes': 'KubernetesOptions'
    }

    attribute_map = {
        'artifact': 'artifact',
        'parallelism': 'parallelism',
        'number_of_task_managers': 'numberOfTaskManagers',
        'resources': 'resources',
        'flink_configuration': 'flinkConfiguration',
        'logging': 'logging',
        'kubernetes': 'kubernetes'
    }

    def __init__(self, artifact=None, parallelism=None, number_of_task_managers=None, resources=None, flink_configuration=None, logging=None, kubernetes=None):  # noqa: E501
        """DeploymentTemplateSpec - a model defined in Swagger"""  # noqa: E501

        self._artifact = None
        self._parallelism = None
        self._number_of_task_managers = None
        self._resources = None
        self._flink_configuration = None
        self._logging = None
        self._kubernetes = None
        self.discriminator = None

        if artifact is not None:
            self.artifact = artifact
        if parallelism is not None:
            self.parallelism = parallelism
        if number_of_task_managers is not None:
            self.number_of_task_managers = number_of_task_managers
        if resources is not None:
            self.resources = resources
        if flink_configuration is not None:
            self.flink_configuration = flink_configuration
        if logging is not None:
            self.logging = logging
        if kubernetes is not None:
            self.kubernetes = kubernetes

    @property
    def artifact(self):
        """Gets the artifact of this DeploymentTemplateSpec.  # noqa: E501


        :return: The artifact of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: Artifact
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this DeploymentTemplateSpec.


        :param artifact: The artifact of this DeploymentTemplateSpec.  # noqa: E501
        :type: Artifact
        """

        self._artifact = artifact

    @property
    def parallelism(self):
        """Gets the parallelism of this DeploymentTemplateSpec.  # noqa: E501


        :return: The parallelism of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this DeploymentTemplateSpec.


        :param parallelism: The parallelism of this DeploymentTemplateSpec.  # noqa: E501
        :type: int
        """

        self._parallelism = parallelism

    @property
    def number_of_task_managers(self):
        """Gets the number_of_task_managers of this DeploymentTemplateSpec.  # noqa: E501


        :return: The number_of_task_managers of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: int
        """
        return self._number_of_task_managers

    @number_of_task_managers.setter
    def number_of_task_managers(self, number_of_task_managers):
        """Sets the number_of_task_managers of this DeploymentTemplateSpec.


        :param number_of_task_managers: The number_of_task_managers of this DeploymentTemplateSpec.  # noqa: E501
        :type: int
        """

        self._number_of_task_managers = number_of_task_managers

    @property
    def resources(self):
        """Gets the resources of this DeploymentTemplateSpec.  # noqa: E501


        :return: The resources of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: dict(str, ResourceSpec)
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this DeploymentTemplateSpec.


        :param resources: The resources of this DeploymentTemplateSpec.  # noqa: E501
        :type: dict(str, ResourceSpec)
        """

        self._resources = resources

    @property
    def flink_configuration(self):
        """Gets the flink_configuration of this DeploymentTemplateSpec.  # noqa: E501


        :return: The flink_configuration of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._flink_configuration

    @flink_configuration.setter
    def flink_configuration(self, flink_configuration):
        """Sets the flink_configuration of this DeploymentTemplateSpec.


        :param flink_configuration: The flink_configuration of this DeploymentTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._flink_configuration = flink_configuration

    @property
    def logging(self):
        """Gets the logging of this DeploymentTemplateSpec.  # noqa: E501


        :return: The logging of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: Logging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this DeploymentTemplateSpec.


        :param logging: The logging of this DeploymentTemplateSpec.  # noqa: E501
        :type: Logging
        """

        self._logging = logging

    @property
    def kubernetes(self):
        """Gets the kubernetes of this DeploymentTemplateSpec.  # noqa: E501


        :return: The kubernetes of this DeploymentTemplateSpec.  # noqa: E501
        :rtype: KubernetesOptions
        """
        return self._kubernetes

    @kubernetes.setter
    def kubernetes(self, kubernetes):
        """Sets the kubernetes of this DeploymentTemplateSpec.


        :param kubernetes: The kubernetes of this DeploymentTemplateSpec.  # noqa: E501
        :type: KubernetesOptions
        """

        self._kubernetes = kubernetes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentTemplateSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentTemplateSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
